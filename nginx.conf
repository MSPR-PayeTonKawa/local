events {
    worker_connections 1024;
}

http {
    upstream auth_service {
        server auth:5000; # Assuming the auth service is running on port 5000 in a Docker container named 'auth'
    }

    upstream product_service {
        server product:3000; # Assuming the product service is running on port 5000 in a Docker container named 'product'
    }

    upstream client_service {
        server client:5000; # Assuming the client service is running on port 5000 in a Docker container named 'client'
    }

    upstream orders_service {
        server orders:5000; # Assuming the orders service is running on port 5000 in a Docker container named 'orders'
    }

    server {
        listen 80;

        location /auth {
            proxy_pass http://auth_service;
        }

        location /product {
            auth_request /auth_request;
            proxy_pass http://product_service;
        }

        location /client {
            auth_request /auth_request;
            proxy_pass http://client_service;
        }

        location /orders {
            auth_request /auth_request;
            proxy_pass http://orders_service;
        }

        location = /auth_request {
            internal;
            proxy_pass http://auth_service/verify_token;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Content-Length "";
            proxy_pass_request_body off;
        }

        error_page 401 = @error401;

        location @error401 {
            return 302 /auth;
        }
    }
}
